---
title: Configuring TKGI Cluster Discovery
owner: Healthwatch
---

<strong><%= modified_date %></strong>

This topic describes how to configure Tanzu Kubernetes Grid Integrated Edition (TKGI) cluster
discovery in Healthwatch.


## <a id='overview'></a> Overview of TKGI Cluster Discovery

In the **TKGI Cluster Discovery Configuration** pane of the Healthwatch tile, you can enable
the Prometheus instance in the Healthwatch tile to detect on-demand Kubernetes clusters created
through the TKGI API and create scrape jobs for them. You only need to configure this pane
if you have Ops Manager foundations with TKGI installed.

The Prometheus instance detects and scrapes TKGI clusters by connecting to the Kubernetes API
through the TKGI API using a UAA client. To enable this process, you must configure the Healthwatch
tile, the Prometheus instance in the Healthwatch tile, the UAA client that the Prometheus instance
uses to connect to the TKGI API, and the TKGI tile.

To configure TKGI cluster discovery:

1. Configure the **TKGI Cluster Discovery Configuration** pane in the Healthwatch tile. For
more information, see [Configure TKGI Cluster Discovery in Healthwatch](#configure-tkgi-cluster-discovery)
below.

1. Configure TKGI to allow the Prometheus instance to scrape metrics from TKGI clusters. For
more information, see [Configure TKGI](#configure-tkgi) below.

If TKGI cluster discovery fails after you have completed both parts of the procedure in this
topic, see [Troubleshooting TKGI Cluster Discovery Failure](#troubleshooting) below.

<p class='note'><strong>Note:</strong> To collect additional BOSH system metrics related to
  TKGI and view them in the Grafana UI, you must install and configure the Healthwatch Exporter
  for TKGI on your foundations with TKGI installed. To install the Healthwatch Exporter for
  TKGI tile, see <a href="../../installing/installing-manually.html">Installing a Tile Manually</a>.
  To configure the Healthwatch Exporter for TKGI tile, see <a href="../configuring-exporter-tkgi.html">Configuring
  Healthwatch Exporter for TKGI</a>.</p>


## <a id='configure-tkgi-cluster-discovery'></a> Configure TKGI Cluster Discovery in Healthwatch

In the **TKGI Cluster Discovery Configuration** pane of the Healthwatch tile, you enable and
configure TKGI cluster discovery, including the UAA client that the Prometheus instance uses
to connect to the Kubernetes API through the TKGI API.

To configure the **TKGI Cluster Discovery Configuration** pane:

1. Navigate to the Ops Manager Installation Dashboard.

1. Click the **Healthwatch** tile.

1. Select **TKGI Cluster Discovery Configuration**.

1. Under **Enable TKGI Cluster Discovery**, select one of the following options:
    * **Disabled:** This option disables TKGI cluster discovery. TKGI cluster discovery is
    disabled by default.
    * **Enabled:** This option enables TKGI cluster discovery and reveals the configuration
    fields described in the steps below.

1. For **Scrape Port**, enter a port where the Healthwatch tile exposes an endpoint from which
the Prometheus instance scrapes metrics detailing the health of the TKGI cluster discovery
process. These metrics appear in the **Healthwatch - Exporter Troubleshooting** dashboard in
the Grafana UI.

1. For **TKGI API Address**, enter the TKGI API domain you configured in the **API Hostname
(FQDN)** field in the **TKGI API** pane of the TKGI tile. For example, `api.tkgi.example.com`.
For more information, see [Routing to the TKGI API VM](https://docs.pivotal.io/tkgi/api-auth.html#routing)
in _TKGI API Authentication_ in the TKGI documentation.

1. For **TKGI UAA Client**, enter one of the following options for the TKGI UAA client username:
    * Enter the TKGI management admin client username `admin`.
    * Create a separate UAA client with access to the TKGI API and enter the client username
    you specify. For more information, see [TKGI API Authentication](https://docs.pivotal.io/tkgi/api-auth.html)
    and [Managing Tanzu Kubernetes Grid Integrated Edition Users with UAA](https://docs.pivotal.io/tkgi/manage-users.html)
    in the TKGI documentation.

1. For **TKGI UAA Client Secret**, enter one of the following options for the TKGI UAA client
secret:
    * Enter the TKGI management admin client secret:
      1. Return to the Ops Manager Installation Dashboard.
      1. Click the **Tanzu Kubernetes Grid Integrated Edition** tile.
      1. Select the **Credentials** tab.
      1. Click **Link to Credential** next to **Pks Uaa Management Admin Client**.
      1. Record the value of `secret`.
      1. Return to the Ops Manager Installation Dashboard.
      1. Click the **Healthwatch** tile.
      1. In the **TKGI Cluster Discovery Configuration** pane, enter the client secret you
      recorded from the **Credentials** tab in the **Tanzu Kubernetes Grid Integrated Edition**
      tile into **TKGI UAA Client Secret**.
    * Create a separate UAA client with access to the TKGI API and enter the client secret
    you specify. For more information, see [Grant Tanzu Kubernetes Grid Integrated Edition
    Access to a Client](https://docs.pivotal.io/tkgi/manage-users.html#uaa-client) in _Managing
    Tanzu Kubernetes Grid Integrated Edition Users with UAA_ in the TKGI documentation.

1. If you configured UAA as the OIDC provider for TKGI in the **UAA** pane of the TKGI tile,
enter the TKGI UAA admin password in **TKGI UAA Admin Password**. Otherwise, do not configure
this field. For more information, see [Grant Tanzu Kubernetes Grid Integrated Edition Access
to a Client](https://docs.pivotal.io/tkgi/manage-users.html#uaa-client) in _Managing Tanzu
Kubernetes Grid Integrated Edition Users with UAA_ in the TKGI documentation.

1. For **Test Frequency in Seconds**, enter in seconds how frequently you want the TKGI service
level indicator (SLI) test to run. The TKGI SLI test monitors the health of the TKGI API by
logging into the TKGI API server, listing all TKGI clusters, and logging out of the TKGI API
server.

1. (Optional) To enable TLS communication between the Prometheus instance and the TKGI API,
configure one of the following options:
    * To configure the Prometheus instance to use a self-signed CA or a certificate that is
    signed by a self-signed CA when communicating with the TKGI API over TLS, provide the CA
    in **TKGI API Certificate Authority**. If you provide a self-signed CA, it must be the
    same CA that signs the certificate in the TKGI API.
    * If you do not provide a self-signed CA or a certificate that is signed by a self-signed
    CA in the **TKGI API Certificate Authority** field, you can enable the **TKGI API Skip
    SSL Validation** checkbox to enable the Prometheus instance to skip SSL validation when
    connecting to the TKGI API. VMware does not recommend skipping SSL validation in a production
    environment.

1. Click **Save**.


## <a id='configure-tkgi'></a> Configure TKGI

After you you enable and configure TKGI cluster discovery in the Healthwatch tile, you must
configure TKGI to allow the Prometheus instance to scrape metrics from TKGI clusters.

To configure TKGI:

1. Return to the Ops Manager Installation Dashboard.

1. Click the **Tanzu Kubernetes Grid Integrated Edition** tile.

1. Select **Host Monitoring**.

1. Under **Enable Telegraf Outputs?**, select **Yes**.

1. Enable the **Include etcd metrics** checkbox to send etcd server and debugging metrics to
Healthwatch.

1. For **Setup Telegraf Outputs**, provide the following TOML configuration file:

    ```toml
    [[outputs.prometheus_client]]
          listen = ":10200"
    ```
    You must use `10200` as the listening port to enable the Prometheus instance to scrape
    Telegraf metrics. For more information about creating a configuration file in TKGI, see
    [Create a Configuration File](https://docs.pivotal.io/tkgi/monitor-etcd.html#toml) in _Configuring
    Telegraf in TKGI_ in the TKGI documentation.

1. Click **Save**.

1. For each plan you want to monitor:
  1. Select the plan you want to monitor. For example, **Plan 2**.
  1. For **(Optional) Add-ons - Use with caution**, enter the following YAML snippet to create
  the roles required to enable the Prometheus instance to scrape metrics from your TKGI clusters:

      <%= partial '../../snippets/cluster_scraping_config.md' %>

      If **(Optional) Add-ons - Use with caution** already contains other API resource definitions,
      append the above YAML snippet to the end of the existing resource definitions, followed
      by a newline character.

1. Click **Save**.

1. Select **Errands**.

1. Ensure that the **Upgrade all clusters** errand is enabled. Running this errand configures
your TKGI clusters with the roles you created in the **(Optional) Add-ons - Use with caution**
field of the plans you monitor in a previous step.

1. Click **Save**.


## <a id='troubleshooting'></a> Troubleshooting TKGI Cluster Discovery Failure

TKGI cluster discovery can fail if the Prometheus instance fails to scrape metrics from your
TKGI clusters. To troubleshoot TKGI cluster discovery failure, see [Troubleshooting Missing
TKGI Cluster Metrics](../../troubleshooting.html#tkgi-clusters) in _Troubleshooting Healthwatch_.
